(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{380:function(t,s,a){"use strict";a.r(s);var e=a(18),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript的执行机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript的执行机制"}},[t._v("#")]),t._v(" JavaScript的执行机制")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://juejin.im/post/59e85eebf265da430d571f89",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 执行机制"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("javaScript是单线程语言，所有的多线程都是通过单线程模拟出来的")])]),t._v(" "),a("li",[a("p",[t._v("js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。")])])]),t._v(" "),a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("ul",[a("li",[t._v("进程：CPU分配资源的最小单位")]),t._v(" "),a("li",[t._v("线程：CPU调度的最小单位（一个进程有多个线程）")]),t._v(" "),a("li",[t._v("浏览器：多进程的"),a("a",{attrs:{href:"https://juejin.im/post/5df1e10cf265da33f34b3243",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器进程架构的演化"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("js: 单线程")])]),t._v(" "),a("h2",{attrs:{id:"一、同步任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、同步任务"}},[t._v("#")]),t._v(" 一、同步任务")]),t._v(" "),a("blockquote",[a("p",[t._v("在主线程上排队执行，前面的没有执行完，后面的任务会一直等待")])]),t._v(" "),a("h2",{attrs:{id:"二、异步任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、异步任务"}},[t._v("#")]),t._v(" 二、异步任务")]),t._v(" "),a("blockquote",[a("p",[t._v("挂在一个任务队列中，等待主线程的所有任务执行完成之后，通知任务队列把可以执行的任务放到主线程执行。")])]),t._v(" "),a("ul",[a("li",[t._v("macrotask(宏任务)：包括整体代码script、setTimeout、setInterval")]),t._v(" "),a("li",[t._v("microtast(微任务)：Promise、process.nextTick、Object.observe、MutationObserver")]),t._v(" "),a("li",[t._v("执行优先级：先执行宏任务，再执行微任务")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 100ms后被放入任务列表中，等待事件循环")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"三、event-loop执行机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、event-loop执行机制"}},[t._v("#")]),t._v(" 三、Event loop执行机制")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("开始循环，首先进入整体代码（宏任务），按照顺序取，直到队列清空")])])]),t._v(" "),a("li",[t._v("1.1 如果遇到微任务，放到本轮循环的微任务中；")]),t._v(" "),a("li",[t._v("1.2 如果遇到宏任务，则放到宏任务的末尾，等待下一轮循环才会执行；")]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("如果发现本轮有未执行的微任务，则执行微任务，直到所有的微任务都执行完；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("结束本轮循环")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("从宏任务开始下一轮循环...")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 宏任务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器\tNode")]),t._v("\nsetTimeout\t√\t√\nsetInterval\t√\t√\nsetImmediate\tx\t√\nrequestAnimationFrame\t√\tx\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 微任务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器\tNode")]),t._v("\nprocess"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextTick\tx\t√\nMutationObserver\t√\tx\nPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("then catch finally\t√\t√\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);